package org.milyn.templating.freemarker;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.milyn.SmooksException;
import org.milyn.cdr.SmooksConfigurationException;
import org.milyn.cdr.SmooksResourceConfiguration;
import org.milyn.cdr.annotation.Configurator;
import org.milyn.container.ExecutionContext;
import org.milyn.delivery.ContentHandler;
import org.milyn.delivery.ContentHandlerFactory;
import org.milyn.delivery.annotation.Resource;
import org.milyn.delivery.dom.serialize.ContextObjectSerializationUnit;
import org.milyn.delivery.sax.SAXElement;
import org.milyn.delivery.sax.SAXElementVisitor;
import org.milyn.delivery.sax.SAXText;
import org.milyn.delivery.sax.SAXUtil;
import org.milyn.javabean.BeanAccessor;
import org.milyn.templating.AbstractTemplateProcessingUnit;
import org.milyn.xml.DomUtils;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import java.io.*;
import java.util.Map;

/**
 * FreeMarker {@link org.milyn.delivery.dom.DOMElementVisitor} Creator class.
 * <p/>
 * Creates {@link org.milyn.delivery.dom.DOMElementVisitor} instances for applying
 * <a href="http://freemarker.org/">FreeMarker</a> transformations (i.e. ".ftl" files).
 * <p/>
 * This templating solution relies on the <a href="http://milyn.codehaus.org/downloads">Smooks JavaBean Cartridge</a>
 * to perform the JavaBean population that's required by <a href="http://freemarker.org/">FreeMarker</a> (for the data model).
 *
 * <h2>Targeting "ftl" Templates</h2>
 * The following is the basic configuration specification for FreeMarker resources:
 * <pre>
 * &lt;resource-config selector="<i>target-element</i>"&gt;
 *     &lt;resource&gt;<b>FreeMarker Resource - Inline or {@link org.milyn.resource.URIResourceLocator URI}</b>&lt;/resource&gt;
 *
 *     &lt;!-- (Optional) The action to be applied on the template content. Should the content
 *          generated by the template:
 *          1. replace ("replace") the target element, or
 *          2. be added to ("addto") the target element, or
 *          3. be inserted before ("insertbefore") the target element, or
 *          4. be inserted after ("insertafter") the target element.
 *          5. be bound to ("bindto") an ExecutionContext variable named by the "bindId" param.
 *          Default "replace".--&gt;
 *     &lt;param name="<b>action</b>"&gt;<i>replace/addto/insertbefore/insertafter</i>&lt;/param&gt;
 *
 *     &lt;!-- (Optional) Should the template be applied before (true) or
 *             after (false) Smooks visits the child elements of the target element.
 *             Default "false".--&gt;
 *     &lt;param name="<b>visitBefore</b>"&gt;<i>true/false</i>&lt;/param&gt;
 *
 *     &lt;!-- (Optional) Template encoding.
 *          Default "UTF-8".--&gt;
 *     &lt;param name="<b>encoding</b>"&gt;<i>encoding</i>&lt;/param&gt;
 *
 *     &lt;!-- (Optional) bindId when "action" is "bindto".
 *     &lt;param name="<b>bindId</b>"&gt;<i>xxxx</i>&lt;/param&gt;
 *
 * &lt;/resource-config&gt;
 * </pre>
 * <p/>
 * <i><u>Example - URI based FreeMarker spec</u></i>:
 * <pre>
 * &lt;resource-config selector="<i>target-element</i>"&gt;
 *     &lt;!-- 1. See {@link org.milyn.resource.URIResourceLocator} --&gt;
 *     &lt;resource&gt;/com/acme/order-transform.ftl&lt;/resource&gt;
 * &lt;/resource-config&gt;
 * </pre>
 * <p/>
 * <i><u>Example - Inlined FreeMarker spec</u></i>:
 * <pre>
 * &lt;resource-config selector="<i>target-element</i>"&gt;
 *     &lt;!-- 1. Note how we have to specify the resource type when it's inlined. --&gt;
 *     &lt;!-- 2. Note how the inlined FreeMarker template is wrapped as an XML Comment. CDATA Section wrapping also works. --&gt;
 *     &lt;resource <b color="red">type="ftl"</b>&gt;
 *         &lt;!--
 *            <i>Inline FreeMarker Template....</i>
 *         --&gt;
 *     &lt;/resource&gt;
 * &lt;/resource-config&gt;
 * </pre>
 *
 * @author tfennelly
 */
@Resource(type="ftl")
public class FreeMarkerContentHandlerFactory implements ContentHandlerFactory {

    /**
	 * Create a FreeMarker based ContentHandler.
     * @param resourceConfig The SmooksResourceConfiguration for the FreeMarker.
     * @return The FreeMarker {@link org.milyn.delivery.ContentHandler} instance.
	 */
	public synchronized ContentHandler create(SmooksResourceConfiguration resourceConfig) throws InstantiationException {
        try {
            return Configurator.configure(new FreeMarkerProcessingUnit(), resourceConfig);
        } catch (SmooksConfigurationException e) {
			InstantiationException instanceException = new InstantiationException("FreeMarker resource [" + resourceConfig.getResource() + "] not loadable.  FreeMarker resource invalid.");
			instanceException.initCause(e);
			throw instanceException;
		}
	}

	/**
	 * <a href="http://freemarker.org/">FreeMarker</a> template application ProcessingUnit.
	 * @author tfennelly
	 */
	private static class FreeMarkerProcessingUnit extends AbstractTemplateProcessingUnit implements SAXElementVisitor {

        private static Log logger = LogFactory.getLog(FreeMarkerProcessingUnit.class);

        private Template template;
        private SmooksResourceConfiguration config;

        protected void loadTemplate(SmooksResourceConfiguration config) throws IOException {
            byte[] templateBytes = config.getBytes();
            Reader templateReader = new InputStreamReader(new ByteArrayInputStream(templateBytes), getEncoding());

            try {
                template = new Template("free-marker-template", templateReader, new Configuration());
            } finally {
                templateReader.close();
            }
            this.config = config;
        }

        protected void visit(Element element, ExecutionContext executionContext) throws SmooksException {
            // Apply the template...
            String templatingResult;
            try {
                Writer writer = new StringWriter();
                applyTemplate(executionContext, writer);
                templatingResult = writer.toString();
            } catch (TemplateException e) {
                throw new SmooksException("Failed to apply FreeMarker template to fragment '" + DomUtils.getXPath(element) + "'.  Resource: " + config, e);
            } catch (IOException e) {
                throw new SmooksException("Failed to apply FreeMarker template to fragment '" + DomUtils.getXPath(element) + "'.  Resource: " + config, e);
            }

            Node resultNode;
            if(getAction() != Action.ADDTO && element == element.getOwnerDocument().getDocumentElement()) {
                // We can't replace the root node with a text node (or insert before/after), so we need
                // to replace the root node with a <context-object key="xxx" /> element and bind the result to the
                // execution context under the specified key. The ContextObjectSerializationUnit will take
                // care of the rest.

                String key = "FreeMarkerObject:" + DomUtils.getXPath(element);
                executionContext.setAttribute(key, templatingResult);
                resultNode = ContextObjectSerializationUnit.createElement(element.getOwnerDocument(), key);
            } else {
                // Create the replacement DOM text node containing the applied template...
                resultNode = element.getOwnerDocument().createTextNode(templatingResult);
            }

            // Process the templating action, supplying the templating result...
            processTemplateAction(element, resultNode);
        }

        public void visitBefore(SAXElement element, ExecutionContext executionContext) throws SmooksException, IOException {
            // Acquire the writer for this SAX element...
            element.getWriter(this);
        }

        public void onChildText(SAXElement element, SAXText childText, ExecutionContext executionContext) throws SmooksException, IOException {
        }

        public void onChildElement(SAXElement element, SAXElement childElement, ExecutionContext executionContext) throws SmooksException, IOException {
        }

        public void visitAfter(SAXElement element, ExecutionContext executionContext) throws SmooksException, IOException {
            try {
                if(getAction() == Action.REPLACE) {
                    Writer writer = element.getWriter(this);
                    applyTemplate(executionContext, writer);
                } else if(getAction() == Action.BIND_TO) {
                    String bindId = getBindId();

                    if(bindId == null) {
                        throw new SmooksConfigurationException("'bindto' templating action configurations must also specify a 'bindId' configuration for the Id under which the result is bound to the ExecutionContext");
                    }
                    Writer writer = new StringWriter();
                    applyTemplate(executionContext, writer);
                    executionContext.setAttribute(bindId, writer.toString());
                } else {
                    throw new SmooksConfigurationException("Sorry, templating action '" + getAction() + "' not supported for SAX.  SAX processing only supports 'replace' and 'bindto' templating actions.");
                }
            } catch (TemplateException e) {
                logger.warn("Failed to apply FreeMarker template to fragment '" + SAXUtil.getXPath(element) + "'.  Resource: " + config, e);
                return;
            } catch (IOException e) {
                logger.warn("Failed to apply FreeMarker template to fragment '" + SAXUtil.getXPath(element) + "'.  Resource: " + config, e);
                return;
            }
        }

        private void applyTemplate(ExecutionContext executionContext, Writer writer) throws TemplateException, IOException {
            Map beans = BeanAccessor.getBeanMap(executionContext);
            template.process(beans, writer);
        }
    }
}
