/*
	Milyn - Copyright (C) 2006

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License (version 2.1) as published by the Free Software 
	Foundation.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
    
	See the GNU Lesser General Public License for more details:    
	http://www.gnu.org/licenses/lgpl.txt
*/

package org.milyn.templating.stringtemplate;

import java.io.IOException;
import java.util.HashMap;

import javax.xml.transform.TransformerConfigurationException;

import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.milyn.cdr.SmooksResourceConfiguration;
import org.milyn.container.ExecutionContext;
import org.milyn.delivery.ContentDeliveryUnit;
import org.milyn.delivery.ContentDeliveryUnitCreator;
import org.milyn.javabean.BeanAccessor;
import org.milyn.templating.AbstractTemplateProcessingUnit;
import org.w3c.dom.Element;
import org.w3c.dom.Text;

/**
 * StringTemplate {@link org.milyn.delivery.process.ProcessingUnit} Creator class.
 * <p/>
 * Creates {@link org.milyn.delivery.ContentDeliveryUnit} instances for applying
 * <a href="http://www.stringtemplate.org/">StringTemplate</a> transformations (i.e. ".st" files).
 * <p/>
 * This templating solution relies on the <a href="http://milyn.codehaus.org/downloads">Smooks JavaBean Cartridge</a>
 * to perform the JavaBean population that's required by <a href="http://www.stringtemplate.org/">StringTemplate</a>.
 * 
 * <h3>.cdrl Configuration</h3>
 * Two configurations are required in order to use <a href="http://www.stringtemplate.org/">StringTemplate</a>
 * based templating:
 * <ol>
 *  <li>A Configuration to register this {@link org.milyn.delivery.ContentDeliveryUnitCreator}
 *      implementation.  This configuration basically tells Smooks how to handle ".st" files.
 *  </li>
 *  <li>Configurations for targeting ".st" template files.
 *  </li>
 * </ol>
 * 
 * <h4>1. Registering StringTemplateContentDeliveryUnitCreator to Handle ".st" Files</h4>
 * <pre>
 * &lt;smooks-resource selector="cdu-creator" path="<b>org.milyn.templating.stringtemplate.StringTemplateContentDeliveryUnitCreator</b>" &gt;
 * 
 *  &lt;!-- 
 *      (Mandatory) Specifying the resource type.  This param bsaically 
 *      tells Smooks use the {@link StringTemplateContentDeliveryUnitCreator} to
 *      create {@link org.milyn.delivery.process.ProcessingUnit} instances for
 *      applying ".st" files (<a href="http://www.stringtemplate.org/">StringTemplate</a> template files).
 *  --&gt;
 *  &lt;param name="<b>restype</b>"&gt;st&lt;/param&gt;
 * 
 * &lt;/smooks-resource&gt;
 * </pre>
 * <p/>
 * Registration of the {@link StringTemplateContentDeliveryUnitCreator} to handle
 * ".st" files can also be done by calling 
 * {@link org.milyn.templating.TemplatingUtils#registerCDUCreators(org.milyn.container.ApplicationContext)}.
 * 
 * <h4>2. Targeting ".st" Files for Transformation</h4>
 * <pre>
 * &lt;smooks-resource  useragent="<i>useragent/profile</i>" selector="<i>target-element</i>" 
 *  path="<b>/com/acme/AcmeStringTemplate.st</b>" &gt;
 *  
 *  &lt;!-- (Optional) The action to be applied on the template content. Should the content 
 *          generated by the template:
 *          1. replace ("replace") the target element, or
 *          2. be added to ("addto") the target element, or
 *          3. be inserted before ("insertbefore") the target element, or
 *          4. be inserted after ("insertafter") the target element.
 *          Default "replace".--&gt;
 *  &lt;param name="<b>action</b>"&gt;<i>replace/addto/insertbefore/insertafter</i>&lt;/param&gt;
 * 
 *  &lt;!-- (Optional) Should the template be applied before (true) or 
 *          after (false) Smooks visits the child elements of the target element. 
 *          Default "false".--&gt;
 *  &lt;param name="<b>visitBefore</b>"&gt;<i>true/false</i>&lt;/param&gt;
 * 
 *  &lt;!-- (Optional) Template encoding. 
 *          Default "UTF-8".--&gt;
 *  &lt;param name="<b>encoding</b>"&gt;<i>encoding</i>&lt;/param&gt;
 * 
 * &lt;/smooks-resource&gt;
 * </pre>
 * 
 * @author tfennelly
 */
public class StringTemplateContentDeliveryUnitCreator implements ContentDeliveryUnitCreator {

    /**
     * Public constructor.
     * @param config Configuration details for this ContentDeliveryUnitCreator.
     */
    public StringTemplateContentDeliveryUnitCreator(SmooksResourceConfiguration config) {        
    }
    
	/**
	 * Create a StringTemplate based ContentDeliveryUnit.
     * @param resourceConfig The SmooksResourceConfiguration for the StringTemplate.
     * @return The StringTemplate {@link ContentDeliveryUnit} instance.
	 */
	public synchronized ContentDeliveryUnit create(SmooksResourceConfiguration resourceConfig) throws InstantiationException {
        try {
			return new StringTemplateProcessingUnit(resourceConfig);
		} catch (TransformerConfigurationException e) {
			InstantiationException instanceException = new InstantiationException("StringTemplate ProcessingUnit resource [" + resourceConfig.getPath() + "] not loadable.  StringTemplate resource invalid.");
			instanceException.initCause(e);
			throw instanceException;
		} catch (IOException e) {
			InstantiationException instanceException = new InstantiationException("StringTemplate ProcessingUnit resource [" + resourceConfig.getPath() + "] not loadable.  StringTemplate resource not found.");
			instanceException.initCause(e);
			throw instanceException;
		}
	}

	/**
	 * StringTemplate template application ProcessingUnit.
	 * @author tfennelly
	 */
	private static class StringTemplateProcessingUnit extends AbstractTemplateProcessingUnit {

        private StringTemplate template;
        
        public StringTemplateProcessingUnit(SmooksResourceConfiguration config) throws IOException, TransformerConfigurationException {
            super(config);
        }

        protected void loadTemplate(SmooksResourceConfiguration config) {
            String path = config.getPath();
            String encoding = config.getStringParameter("encoding", "UTF-8");
            
            if(path.charAt(0) == '/') {
                path = path.substring(1);
            }
            if(path.endsWith(".st")) {
                path = path.substring(0, path.length() - 3);
            }
            
            StringTemplateGroup templateGroup = new StringTemplateGroup(path);
            templateGroup.setFileCharEncoding(encoding);
            template = templateGroup.getInstanceOf(path);
        }

        protected void visit(Element element, ExecutionContext executionContext) {
            // First thing we do is clone the template for this transformation...
            StringTemplate thisTransTemplate = template.getInstanceOf();
            HashMap beans = BeanAccessor.getBeans(executionContext);
            String templatingResult;

            // Set the document data beans on the template and apply it...
            thisTransTemplate.setAttributes(beans);
            templatingResult = thisTransTemplate.toString();
            
            // Create the replacement DOM text node containing the applied template...            
            Text transformationTextNode = element.getOwnerDocument().createTextNode(templatingResult);
            
            // Process the templating action, supplying the templating result...
            processTemplateAction(element, transformationTextNode);
        }
	}
}
