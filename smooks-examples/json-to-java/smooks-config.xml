<?xml version="1.0"?>
<smooks-resource-list xmlns="http://www.milyn.org/xsd/smooks-1.0.xsd">

    <!--
    Configure the JSON Reader to read the message stream into a stream of SAX events.

    The input message contains whitespaces in the key names. Whitespaces aren't allowed in
    element names of the SAX event stream. To solve this we replace the whitespaces with dashes (-).

  	Another special case is that the is a key called date&time. The ampersand isn't allowed in a
  	element name of the SAX event stream. We can solve this in two ways. Configure the reader, with
  	the illegalElementNameCharReplacement parameter, to replace all illegal characters with
  	a character that is allowed. In this example however we solve it by mapping the "date&time" key
    to the "date-and-time" name.

    There are more settings to for the org.milyn.json.JSONReader.
    Take a look at the Javadoc of the class for alle the possible parameters.
    -->
    <resource-config selector="org.xml.sax.driver">
	    <resource>org.milyn.json.JSONReader</resource>
	    <param name="rootName">order</param>
	    <param name="keyWhitspaceReplacement">-</param>
	    <param name="keyMap">
	    	<key from="date&amp;time" to="date-and-time" />
	    </param>
	</resource-config>


    <!--
    Create an "example.beans.Order" bean instance when we visit the start of the <order> element.
    Assign the new bean instance to the beanId of "order".
    Target the to be created Header bean under the beanId "header" via the ${header} bean binding.
    As soon as this bean is created it will be set on this bean instance.
    Target the to be created ArrayList instance under the beanId "orderItems" via the ${orderItems} bean binding.
    As soon as this list is created it will be set on this bean instance.
    -->
    <resource-config selector="order">
        <resource>org.milyn.javabean.BeanPopulator</resource>
        <param name="beanId">order</param>
        <param name="beanClass">example.model.Order</param>
        <param name="bindings">
        	<binding property="header" selector="${header}" />
        	<binding property="orderItems" selector="${orderItems}" />
        </param>
    </resource-config>

    <!--
    Create an "example.beans.Header" bean instance when we visit the start of the <order> element.
    Note, we're creating this bean instance before we encounter the actual <header> element.
    This bean is set on the on the previous declared Order bean as soon as it is created, because
    it is target by that bean via a bean binding.
    Target the to be created Customer instance under the beanId "customer" via the ${customer} bean binding.
    As soon as this bean is created it will be set on this bean instance.
    -->
    <resource-config selector="order">
        <resource>org.milyn.javabean.BeanPopulator</resource>
        <param name="beanClass">example.model.Header</param>
        <param name="bindings">
            <!-- Header bindings... -->
            <binding property="customer" selector="${customer}" />
            <binding property="orderId" selector="header order-id" />
            <binding property="orderStatus" type="Long" selector="header status-code" />
            <binding property="netAmount" type="BigDecimal" selector="header net-amount" />
            <binding property="totalAmount" type="BigDecimal" selector="header total-amount" />
            <binding property="tax" type="BigDecimal" selector="header tax" />
            <binding property="date" type="OrderDateLong" selector="header date-and-time" />
        </param>
    </resource-config>

    <!--
    Create an "example.beans.Customer" bean instance when we visit the start of the
    <customer-details> element.
	This bean is set on the on the previous declared Header bean as soon as it is created, because
    it is target by that bean via a bean binding.
    -->
    <resource-config selector="customer-details">
        <resource>org.milyn.javabean.BeanPopulator</resource>
        <param name="beanClass">example.model.Customer</param>
        <param name="bindings">
            <!-- Customer bindings... -->
            <binding property="userName" selector="customer-details username" />
            <binding property="firstName" selector="customer-details firstname" />
            <binding property="lastName" selector="customer-details lastname" />
            <binding property="state" selector="customer-details state" />
        </param>
    </resource-config>

	<!--
	Create an ArrayList when we visit the start of the <order> element.
	This list is set on the on the previous declared Order bean as soon as it is created, because
    it is target by that bean via a bean binding.
	Target the to be created OrderItem beans under the beanId "orderItem" via the ${orderItem} bean binding.
    As soon as these beans are created they will be added to this list.
	 -->
	<resource-config selector="order">
        <resource>org.milyn.javabean.BeanPopulator</resource>
        <param name="beanClass">java.util.ArrayList</param>
        <param name="beanId">orderItems</param>
        <param name="bindings">
        	<binding selector="${orderItem}" />
        </param>
	</resource-config>

    <!--
    Create an "example.beans.OrderItem" bean instance when we visit the start of the <order-item> element.
    This bean is add to the on the previous declared ArrayList as soon as it is created, because
    it is target by that ArrayList via a bean binding.
    -->
    <resource-config selector="order-item element">
        <resource>org.milyn.javabean.BeanPopulator</resource>
        <param name="beanClass">example.model.OrderItem</param>
        <param name="bindings">
            <!-- OrderItem bindings... -->
            <binding property="quantity" type="Integer" selector="order-item element quantity" />
            <binding property="productId" type="String" selector="order-item element product-id" />
            <binding property="price" type="BigDecimal" selector="order-item element price" />
            <binding property="title" selector="order-item element title" />
        </param>
    </resource-config>

    <!--
    Configure a special decoder for the <date> field of the <header> - to set the date format.
    -->
    <resource-config selector="decoder:OrderDateLong">
        <resource>org.milyn.javabean.decoders.DateDecoder</resource>
        <param name="format">EEE MMM dd HH:mm:ss z yyyy</param>
    </resource-config>

</smooks-resource-list>
