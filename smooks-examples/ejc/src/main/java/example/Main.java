/*
	Milyn - Copyright (C) 2006

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License (version 2.1) as published by the Free Software
	Foundation.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

	See the GNU Lesser General Public License for more details:
	http://www.gnu.org/licenses/lgpl.txt
*/
package example;

import org.milyn.Smooks;
import org.milyn.SmooksException;
import org.milyn.io.StreamUtils;
import org.milyn.container.ExecutionContext;
import org.milyn.edisax.EDIConfigurationException;
import org.milyn.ejc.EJC;
import org.milyn.ejc.IllegalNameException;
import org.milyn.payload.JavaResult;
import org.xml.sax.SAXException;

import javax.xml.transform.stream.StreamSource;
import java.io.*;
import java.net.URLDecoder;

import test.packageName.OrderFactory;
import test.packageName.Order;

/**
 * Simple example of how to use EJC.
 *
 * @author bardl
 */
public class Main {

    private static final String SEPARATOR = "----------------------------------------------------------------------";
    private static final String CLS = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";

    private String folder;
    private String packageName;

    public Main() {
        try {
            folder = URLDecoder.decode(Thread.currentThread().getContextClassLoader().getResource("").toString().replace("file:/", ""), "utf-8");
        } catch (UnsupportedEncodingException e) {
            folder = null;
        }
        packageName = "test.packageName";
    }

    public String getFolder() {
        return folder;
    }

    public String getPackageName() {
        return packageName;
    }

    /**
     * Tests running the EJC compiler on edi-configuration: edi-to-xml-order-mapping.xml. After
     * compilation the generated classes and binding-file is tested with the original
     * edi-configuration and a valid edi-file.
     * @throws IOException when unable to read input files.
     * @throws SAXException when unable to read configuration-files.
     * @throws org.milyn.edisax.EDIConfigurationException when edi-configuration is wrong.
     * @throws InterruptedException when error occurs during compilation of generated classes.
     * @throws org.milyn.ejc.IllegalNameException when error occurs during compilation in EJC.
     * @throws org.milyn.SmooksException when error occurs during filtering.
     * @param args no arguments are need.
     */
    public static void main(String[] args) throws IOException, SAXException, SmooksException, EDIConfigurationException, IllegalNameException, InterruptedException {

        Main main = new Main ();

//        introToPart1();

//        writeEdiConfiguration(main.getFolder());
//
//        writeEJCCompilation();
//
//        main.performEJCCompilation();
//
//        writeSummaryToPart1(main.getFolder());

        introToPart2();

        writeEDIInputFile(main.getFolder());

        main.performSmooksFiltering();

        writeSummary();
    }

    private static void introToPart1() throws IOException {
        System.out.println(CLS);
        System.out.println(SEPARATOR);
        System.out.println("EJC - Part 1 : Compiling an edi-configuration.");
        System.out.println(SEPARATOR );
        System.out.println("The is part 1 of the ejc example. In this part an edi-configuration");
        System.out.println("will be compiled by the EJC and java classes and a binding-file is ");
        System.out.println("generated. Then in Part 2 the generated classes will be used in Smooks.");
        pause("\nPress any key to start example...");
    }

    private static void introToPart2() throws IOException {
        System.out.println(CLS);
        System.out.println(SEPARATOR);
        System.out.println("EJC - Part 2 : Testing the generated files in Smooks.");
        System.out.println(SEPARATOR );
        System.out.println("This is part 2 of the ejc example. In this part the files");
        System.out.println("generated by EJC will be tested in Smooks.");
        pause("\nPress any key to start example...");
    }

    private static void writeEDIInputFile(Object folder) throws IOException {
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(folder + "../../" + "input-message.edi");
            byte[] ediFile = new byte[inputStream.available()];
            inputStream.read(ediFile);
            System.out.println("\n" + SEPARATOR);
            System.out.println("The edi input file.");
            System.out.println(SEPARATOR);
            System.out.println("The edi-input that will be used to test the generated edi-configuration ");
            System.out.println("and the generated files by EJC.");
            pause("\nPress any key to view edi-input...\n");
            System.out.println(new String(ediFile));

        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }

    private static void writeSummary() throws IOException {
        System.out.println("\n" + SEPARATOR);
        System.out.println("Second and final part of example is complete.");
        System.out.println(SEPARATOR );
        System.out.println("Now the files generated by EJC has been tested in Smooks ");
        System.out.println("and the Order-class has been serialized to xml along with all ");
        System.out.println("classes existing in Order.");
        pause("\nPress any key to finish the example...");
    }

    private static void writeEdiConfiguration(String folder) throws IOException {
        System.out.println("\n" + SEPARATOR);
        System.out.println("The original edi-configuration.");
        System.out.println(SEPARATOR );
        System.out.println("The EJC needs an edi-configuration to generate java classes ");
        System.out.println("and binding-file.");
        pause("\nPress any key to view edi-config...");
        System.out.println(new String(getEDIConfiguration(folder)));
    }

    private static void writeEJCCompilation() {
        System.out.println("\n" + SEPARATOR);
        System.out.println("Compile the edi-configuration with EJC.");
        System.out.println(SEPARATOR );
        System.out.println("When compiling the edi-config EJC will generate java-");
        System.out.println("classes corresponding with the structure of the edi-config ");
        System.out.println("and a binding-file that can be used to populate the ");
        System.out.println("generated classes when reading a edi-input-file.");
        pause("\nPress any key to start EJC compilation of edi-config...");
    }

    private static void writeSummaryToPart1(String folder) throws IOException {
        System.out.println("\n" + SEPARATOR);
        System.out.println("First part of example is complete.");
        System.out.println(SEPARATOR );
        System.out.println("Now the EJC has generated java classes and a binding-file in");
        System.out.println("folder [" + folder + "].");
        System.out.println("In the next part of the example we will compile the generated ");
        System.out.println("java classes and use the binding-file to populate the classes ");
        System.out.println("when reading an edi-input-file.\n");
        System.out.println("The next part of the example write 'mvn exec:java -P testGeneratedFiles'.");
        pause("\nPress any key to finish the example...");

    }

    private static void pause(String message) {
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("> " + message);
            in.readLine();
        } catch (IOException e) {
            //Do nothing
        }
        System.out.println("\n");
    }

    private void performEJCCompilation() throws IOException, SAXException, InterruptedException, EDIConfigurationException, IllegalNameException {

        System.out.println("\n" + SEPARATOR);
        System.out.println("EJC - compile edi-configuration.");
        System.out.println(SEPARATOR);
        System.out.println("In this step the EJC compile method is invoked with the ");
        System.out.println("edi-to-xml-order-mapping.xml as the edi-configuration. ");
        System.out.println("The pakage name of the generated javaclasses is ");
        System.out.println("'test.packageName' and the outputfolder is");
        System.out.println("[" + folder + "].\n");

        compileWithEJC();

    }

    private void performSmooksFiltering() throws IOException, SAXException, InterruptedException, EDIConfigurationException, IllegalNameException {

        System.out.println("\n" + SEPARATOR);
        System.out.println("Smooks - read EDI input file and bind to java classes.");
        System.out.println(SEPARATOR);
        System.out.println("In this step the generated java classes is compiled and");
        System.out.println("populated with the generated binding-configuration.");
        System.out.println("The resulting Order class is presented below.\n");

        pause("\nPress any key to view result after testing the files in Smooks...");

        System.out.println(runEJCTest());

    }

    protected void compileWithEJC() throws EDIConfigurationException, IllegalNameException, IOException, SAXException, InterruptedException {
        InputStream inputStream = null;
        try {
            EJC ejc = new EJC();

            InputStream configFile = new ByteArrayInputStream(getResource("edi-to-xml-order-mapping.xml"));
            ejc.compile(configFile, "edi-to-xml-order-mapping.xml", packageName, folder, folder + "binding-config.xml");

        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
    }

    protected String runEJCTest() throws EDIConfigurationException, IllegalNameException, IOException, SAXException, InterruptedException {

        InputStream inputStream = null;
        try {

            inputStream = new FileInputStream(folder + "../../" + "input-message.edi");
            OrderFactory orderFactory = OrderFactory.getInstance();
            Order order = orderFactory.parse(inputStream);

            com.thoughtworks.xstream.XStream xstream = new com.thoughtworks.xstream.XStream();
            return xstream.toXML(order);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        } finally {
            if (inputStream != null) {
                inputStream.close();
            }
        }
//        InputStream inputStream = null;
//        try {
//
//            compileSourceFile(folder,  packageName, "OrderFactory");
//
//            Smooks smooks = new Smooks();
//
//            try {
//                smooks.addConfigurations(new FileInputStream(folder + "binding-config.xml"));
//                ExecutionContext context = smooks.createExecutionContext();
//
//                JavaResult result = new JavaResult();
//                inputStream = new FileInputStream(folder + "../../" + "input-message.edi");
//                StreamSource source = new StreamSource(inputStream);
//                smooks.filterSource(context, source, result);
//
//                com.thoughtworks.xstream.XStream xstream = new com.thoughtworks.xstream.XStream();
//
//                return xstream.toXML(result.getBean("order"));
//            } finally {
//                smooks.close();
//            }
//        } finally {
//            if (inputStream != null) {
//                inputStream.close();
//            }
//        }
    }

    private static byte[] getEDIConfiguration(String folder) throws IOException {
        FileInputStream input = null;
        try {
            input = new FileInputStream(folder + "../../" + "edi-to-xml-order-mapping.xml");
            byte[] ediconfig = new byte[input.available()];
            input.read(ediconfig);
            return ediconfig;
        } finally {
            if (input != null) {
                input.close();
            }
        }
    }

    private static byte[] getResource(String resourceName) throws IOException {
        InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resourceName);
        byte[] b = new byte[in.available()];
        in.read(b);
        in.close();
        return b;
        //return StreamUtils.readStream(new FileInputStream(resourceName));
    }

    private static void compileSourceFile(String path, String packageName, String className) throws InterruptedException, IOException {
        String classFile = path + packageName.replace('.', '/') + "/" + className + ".java";
        String[] parameters = {"-classpath", getClassPath(path), classFile};

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        try {
            com.sun.tools.javac.Main.compile(parameters, pw);
        } catch (Exception e) {
            assert false : sw.toString();
        } finally {
            pw.close();
            sw.close();
        }
    }

    private static String getClassPath(String path) throws IOException {
        StringBuilder result  = new StringBuilder();
        result.append(path);

        String currentDir = Thread.currentThread().getContextClassLoader().getResource("").getFile();
        File dependencyDir = new File(currentDir + "../dependencies");
        for (File file : dependencyDir.listFiles()) {
            if (file.getName().startsWith("milyn-smooks-core-") || file.getName().startsWith("milyn-commons-")) {
                result.append(";");
                result.append(file.getCanonicalPath());
            }
        }
        return result.toString();
    }
}
