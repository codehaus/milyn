/*
	Milyn - Copyright (C) 2003

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License (version 2.1) as published by the Free Software 
	Foundation.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
    
	See the GNU Lesser General Public License for more details:    
	http://www.gnu.org/licenses/lgpl.txt
*/

package org.milyn.delivery;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.Writer;

import org.milyn.delivery.SmooksHtmlHtmlHtml;
imporg.milyn.delivery.SmooksHtmlHtmlooksException;
import org.milyn.container.MockContainerRequest;
import org.milyn.io.StreamUtils;
import org.milyn.util.CharUtils;
import org.milyn.util.SmooksUtil;
import org.w3c.dom.Node;

import junit.framework.TestCase;

/**
 * 
 * @author tfennelly
 */
public class XslContentDeliveryUnitCreatorTest extends TestCase {

	public void testXslUnitTrans_from_classpath() {
		SmooksUtil smooksUtil;
		
		smooksUtil = new SmooksUtil();
		smooksUtil.addCDRDef("p", "devicename", "org/milyn/delivery/xsltransunit.xsl", null);
		
		transAndCompare(smooksUtil.getRequest("devicename"));
	}	

	public void testXslUnitTrans_from_cdrar() {
		InputStream stream = null;
		SmooksUtil smooksUtil;
		byte[] xslBytes = null;
		
		try {
			xslBytes = StreamUtils.readStream(getClass().getResourceAsStream("xsltransunit.xsl"));
		} catch (IOException e1) {
			e1.printStackTrace();
			fail(e1.getMessage());
		}
		smooksUtil = new SmooksUtil();
		smooksUtil.addCDRDef("p", "devicename", "xxxxx.xsl", xslBytes);
		
		transAndCompare(smooksUtil.getRequest("devicename"));
	}

	/**
	 * @param request
	 * @param stream
	 * @param deliveryNode
	 */
	private void transAndCompare(MockContainerRequest request) {
		SmooksHtml smooks;
		Node deliveryNode = null;

		smooks = new SmooksHtml(request);
		try {
			InputStream stream = getClass().getResourceAsStream("htmlpage.html");
			deliveryNode = smooks.applyTransform(new InputStreamReader(stream));
		} catch (SmooksException e) {
			e.printStackTrace();
			fail("unexpected exception: " + e.getMessage());
		}
		assertNotNull("Null transform 'Document' return.", deliveryNode);
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		try {
			Writer writer = new OutputStreamWriter(output);
			smooks.serailize(deliveryNode, writer);
			writer.flush();
		} catch (Exception e) {
			e.printStackTrace();
			fail("unexpected exception: " + e.getMessage());
		}
		byte[] transResult = output.toByteArray();
		boolean equalsExpected = CharUtils.compareCharStreams(getClass().getResourceAsStream("xsltransunit.expected"), new ByteArrayInputStream(transResult));
		if(!equalsExpected) {
			System.out.println("============== XSL Comparison Failure - See xsltransunit.expected ==================");
			System.out.println(new String(transResult));
			System.out.println("====================================================================================");
		}
		assertTrue("Expected XSL Transformation result failure.", equalsExpected);
	}	
}
